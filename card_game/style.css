/*
---     :root ==> html, element racine

---     --nom-eexemple ==> propriété personnalisé qui peuvent etre reutilise ac une var

---     position ===> défini dont un élément est posiioné dans un document.
        relative ==> il est positionné dans le flux normal et ensuite décalé par rapport
        à lui même selon top, bot,...
        absolute ===> aucun espace ne lui est laisser et vient se superposer à son ancetre direct

---     transform-style ===> défini si les éléments-fils sont positionnés dans l'espace traditionnel
        ou s'ils sont applatis dans le plan de l'élément.
        preserve-3d ===> indique que les fils de l'élément ciblé doivent
        être positionné dans l'espace traditionnel.


---     backface-visibility ===> indique si la face arrière d'un élément doit etre visible ou non.
        --webkit-backface-visibility ===> c'est la même chose, sauf que --webkit est un framework de formatage de balisage
        hidden ===> la face doit etre caché

---     rotateY(xdeg) ===> transformation qui déplace un élément autour d'un point fixe.

---     display ===> défini le type de rendu d'un affcha d'un élément
        flex ===> propriété qui peremet de rendre son élément flexible
        grid ===> propriété lié aux grilles

---     justify-content ===> indique la fafcon dont l'espace doit être utiliser
        center ===> l'element doit être centrer dans son bloc


---     calc ===> il est possible de faire des calcules en css ac ceci

---     grid-template-columns ===> cette propriété définit les noms des lignes et les tailles
        grid-template-rows ===> cette propriété définit les noms des lignes et les tailles
        grid-template-aera ===> cette propriété définit des zones de grilles











 */
:root {
    --card-width: 157px;
    --card-height: 220px;
    --num-cards: 4;
    --card-horizontale-space: 100px;
}

body {
    height: 100vh;
}

main {
    height: 55%;
    display: flex;
    justify-content: center;
}

.card-container {
    position: relative;
    height: 100%;
    width:calc(var(--card-width) * (var(--num-cards) / 2) + var(--card-horizontal-space));
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    grid-template-areas: "a b"
                         "c d";
    border:1px solid black;
}


.card-pos-a {
    grid-area: a;
    background-color: aqua;
}
.card-pos-b {
    grid-area: b;
    background-color: yellow;
}
.card-pos-c {
    grid-area: c;
    background-color: red;
}
.card-pos-d {
    grid-area: d;
    background-color: saddlebrown;
}







.card {
    position: absolute;
    height: var(--card-height);
    width: var(--card-width);
    perspective: 1000px;
    cursor: pointer;
}

.card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.6s;
    transform-style: preserve-3d;
}

.card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;

}

.card-img {
    height: 100%;
}

.card-back {
    transform: rotateY(180deg);
}

.card:hover .card-inner{
    transform: rotateY(180deg);
}


